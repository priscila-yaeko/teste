# Projeto de Testes Automatizados com Maven, Allure e GitHub Actions

Este projeto foi configurado para executar testes automatizados utilizando **Java + Maven** e gerar relatórios bonitos com o **Allure Report**. Além disso, o relatório é publicado automaticamente via **GitHub Actions** no **GitHub Pages**.

---

## ✅ Funcionalidades

* ✔️ Execução de testes com JUnit
* ✔️ Geração de relatórios com Allure
* ✔️ Pipeline de CI com GitHub Actions
* ✔️ Deploy automático do relatório no GitHub Pages
* ✔️ Armazenamento do relatório como artefato no GitHub

---

## 🧪 Executando localmente

1. **Clone o projeto:**

   ```bash
   git clone https://github.com/priscila-yaeko/teste.git
   cd teste
   ```

2. **Execute os testes com Maven:**

   ```bash
   mvn clean test
   ```

3. **Gere o relatório Allure localmente:**

   ```bash
   allure generate target/allure-results -o target/allure-report --clean
   allure open target/allure-report
   ```

---

## 🚀 Acesso ao Relatório

O relatório gerado pela pipeline está disponível no GitHub Pages:

🔗 **[Clique aqui para visualizar o Allure Report](https://priscila-yaeko.github.io/teste/)**

---

## ⚙️ GitHub Actions

O workflow automatiza:

* Build do projeto
* Execução dos testes
* Geração do relatório Allure
* Upload como artefato
* Deploy no GitHub Pages

### 📋 Arquivo `.github/workflows/ci.yml`

```yaml
name: Java CI with Maven and Allure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and run tests
        run: mvn clean test

      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.21.0/allure-2.21.0.zip
          unzip allure-2.21.0.zip -d $HOME/

      - name: Generate Allure report
        run: |
          export PATH=$HOME/allure-2.21.0/bin:$PATH
          allure generate target/allure-results -o target/allure-report --clean

      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
```

---

## 📆 Detalhamento do Teste de Login (`LoginTest.java`)

```java
@Epic("Login")
@Feature("Tela de Login")
public class LoginTest {

    @Test
    @Story("Login com credenciais válidas")
    @DisplayName("Fazer Login na aplicação")
    @Description("Teste que faz login com email e senha vindos do arquivo .env ou variáveis de ambiente")
    @Severity(SeverityLevel.CRITICAL)
    public void fazerLogin() {
        Dotenv dotenv = Dotenv.configure().ignoreIfMissing().load();

        String email = System.getenv("LOGIN_EMAIL");
        if (email == null) email = dotenv.get("LOGIN_EMAIL");

        String senha = System.getenv("LOGIN_SENHA");
        if (senha == null) senha = dotenv.get("LOGIN_SENHA");

        if (email == null || senha == null) {
            throw new IllegalStateException("LOGIN_EMAIL e LOGIN_SENHA não definidos");
        }

        WebDriverManager.chromedriver().setup();

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless", "--no-sandbox", "--disable-dev-shm-usage", "--remote-allow-origins=*");

        WebDriver driver = new ChromeDriver(options);
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        driver.manage().window().maximize();
        driver.get("https://applications.fsbr.com.br/homolog/assine--frontend/");

        driver.findElement(By.xpath("//body/header/div[@class='buttons-header']/a[1]")).click();
        driver.findElement(By.cssSelector("#login")).sendKeys(email);
        driver.findElement(By.cssSelector("#senha")).sendKeys(senha);
        driver.findElement(By.xpath("//button[normalize-space()='Entrar']")).click();

        driver.quit();
    }
}
```

### ✅ Passos executados no teste:

1. Carrega variáveis de ambiente ou do `.env`
2. Configura o WebDriver para rodar com Google Chrome em modo headless
3. Abre o site da aplicação
4. Clica no botão de login
5. Preenche os campos de email e senha
6. Clica em "Entrar"
7. Encerra o navegador

---

## 📆 Observações

* O branch `gh-pages` é gerado automaticamente pela pipeline.
* O link do relatório é atualizado a cada novo push na branch `main`.
* Variáveis sensíveis como email e senha são lidas via ambiente ou `.env`, nunca diretamente no código.

---

## 💼 Dependências do Projeto

* Java 17
* Maven
* Allure CLI
* JUnit 5
* Selenium WebDriver
* WebDriverManager
* dotenv-java

---

## 👩‍💼 Autora

**Priscila Yaeko Cunha**
🔗 [GitHub](https://github.com/priscila-yaeko).

✅ Como acessar o relatório Allure no navegador
Vá até o seu repositório no GitHub:
👉 https://github.com/priscila-yaeko/teste

Clique em Settings (Configurações) → depois em Pages (ou “Pages” no menu lateral).

Lá, você verá a URL publicada do GitHub Pages, algo como:
👉 https://priscila-yaeko.github.io/teste/

👉 Clique nesse link e você verá o relatório Allure publicado...


 
